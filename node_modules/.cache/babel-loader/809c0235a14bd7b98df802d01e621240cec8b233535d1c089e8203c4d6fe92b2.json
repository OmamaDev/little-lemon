{"ast":null,"code":"// const availableTimesByDate = {\n//     '2023-08-29': ['10:00', '11:00', '12:00'],\n//     '2023-09-01': ['10:00', '11:00', '12:00'],\n//     '2023-09-02': ['14:00', '15:00', '16:00'],\n//     '2023-09-03': ['10:00', '11:00', '12:00'],\n//     '2023-09-04': ['14:00', '15:00', '16:00'],\n//     '2023-09-05': ['10:00', '11:00', '12:00'],\n//     '2023-09-06': ['14:00', '15:00', '16:00'],\n//     '2023-09-07': ['10:00', '11:00', '12:00'],\n//     '2023-09-08': ['14:00', '15:00', '16:00'],\n//     '2023-09-09': ['10:00', '11:00', '12:00'],\n//     '2023-09-10': ['14:00', '15:00', '16:00'],\n//     '2023-09-11': ['10:00', '11:00', '12:00'],\n//     '2023-09-12': ['14:00', '15:00', '16:00'],\n//     '2023-09-13': ['10:00', '11:00', '12:00'],\n//     '2023-09-14': ['14:00', '15:00', '16:00'],\n//     '2023-09-15': ['10:00', '11:00', '12:00'],\n//     '2023-09-16': ['14:00', '15:00', '16:00'],\n//     '2023-09-17': ['10:00', '11:00', '12:00'],\n//     '2023-09-18': ['14:00', '15:00', '16:00'],\n//     '2023-09-19': ['10:00', '11:00', '12:00'],\n//     '2023-09-20': ['14:00', '15:00', '16:00'],\n//     '2023-11-28': ['10:00', '11:00', '12:00'],\n//     '2023-11-29': ['14:00', '15:00', '16:00'],\n//     '2023-11-30': ['10:00', '11:00', '12:00'],\n//     '2023-12-01': ['14:00', '15:00', '16:00'],\n//     '2023-12-02': ['10:00', '11:00', '12:00'],\n//     '2023-12-03': ['14:00', '15:00', '16:00'],\n//     '2023-12-04': ['10:00', '11:00', '12:00'],\n//     '2023-12-05': ['14:00', '15:00', '16:00'],\n//     '2023-12-06': ['10:00', '11:00', '12:00'],\n//     '2023-12-07': ['14:00', '15:00', '16:00'],\n//     '2023-12-08': ['10:00', '11:00', '12:00'],\n//     '2023-12-09': ['14:00', '15:00', '16:00'],\n//     '2023-12-10': ['10:00', '11:00', '12:00'],\n//     '2023-12-11': ['14:00', '15:00', '16:00'],\n//     '2023-12-12': ['10:00', '11:00', '12:00'],\n//     '2023-12-13': ['14:00', '15:00', '16:00'],\n//     '2023-12-14': ['10:00', '11:00', '12:00'],\n//     '2023-12-15': ['14:00', '15:00', '16:00'],\n//     '2023-12-16': ['10:00', '11:00', '12:00'],\n//     '2023-12-17': ['14:00', '15:00', '16:00'],\n//     '2023-12-18': ['10:00', '11:00', '12:00'],\n//     '2023-12-19': ['14:00', '15:00', '16:00'],\n//     '2023-12-20': ['10:00', '11:00', '12:00'],\n//     '2023-12-21': ['14:00', '15:00', '16:00'],\n//     '2023-12-22': ['10:00', '11:00', '12:00'],\n//     '2023-12-23': ['14:00', '15:00', '16:00'],\n//     '2023-12-24': ['10:00', '11:00', '12:00'],\n//     '2023-12-25': ['14:00', '15:00', '16:00'],\n//     '2023-12-26': ['10:00', '11:00', '12:00'],\n//     '2023-12-27': ['14:00', '15:00', '16:00'],\n//     '2023-12-28': ['10:00', '11:00', '12:00'],\n//     '2023-12-29': ['14:00', '15:00', '16:00'],\n//     '2023-12-30': ['10:00', '11:00', '12:00'],\n//     '2023-12-31': ['14:00', '15:00', '16:00']\n// };\n\n// const fetchAPI = (date) => {\n//     return new Promise((resolve, reject) => {\n//         setTimeout(() => {\n//             if (availableTimesByDate[date]) {\n//                 resolve(availableTimesByDate[date])\n//             }\n//             else {\n//                 reject(new Error('No available times for the selected date.'));\n//             }\n//         }, 1000)\n//     })\n// }\n\n// const submitAPI = (formData) => {\n\n//     availableTimesByDate[formData.date] = availableTimesByDate[formData.date].filter(time => time !== formData.time);\n\n//     return new Promise((resolve, reject) => {\n//         setTimeout(() => {\n//             if (formData) {\n//                 resolve(true); // Simulate successful submission\n//             } else {\n//                 reject(new Error('Form submission failed.'));\n//             }\n//         }, 1000); // Simulate API delay\n//     });\n// };\n\n// export { fetchAPI, submitAPI }\n\nconst seededRandom = seed => {\n  const m = 2 ** 35 - 31;\n  const a = 185852;\n  let s = seed % m;\n  return () => (s = s * a % m) / m;\n};\nconst fetchAPI = date => {\n  let result = [];\n  let random = seededRandom(date.getDate());\n  for (let i = 17; i <= 23; i++) {\n    if (random() < 0.5) result.push(i + ':00');\n    if (random() < 0.5) result.push(i + ':30');\n  }\n  return result;\n};\nconst submitAPI = formData => true;\nexport { fetchAPI, submitAPI };","map":{"version":3,"names":["seededRandom","seed","m","a","s","fetchAPI","date","result","random","getDate","i","push","submitAPI","formData"],"sources":["C:/Users/PSK/react-project-coursera/little-lemon/src/components/utilities/MockApi.js"],"sourcesContent":["\r\n// const availableTimesByDate = {\r\n//     '2023-08-29': ['10:00', '11:00', '12:00'],\r\n//     '2023-09-01': ['10:00', '11:00', '12:00'],\r\n//     '2023-09-02': ['14:00', '15:00', '16:00'],\r\n//     '2023-09-03': ['10:00', '11:00', '12:00'],\r\n//     '2023-09-04': ['14:00', '15:00', '16:00'],\r\n//     '2023-09-05': ['10:00', '11:00', '12:00'],\r\n//     '2023-09-06': ['14:00', '15:00', '16:00'],\r\n//     '2023-09-07': ['10:00', '11:00', '12:00'],\r\n//     '2023-09-08': ['14:00', '15:00', '16:00'],\r\n//     '2023-09-09': ['10:00', '11:00', '12:00'],\r\n//     '2023-09-10': ['14:00', '15:00', '16:00'],\r\n//     '2023-09-11': ['10:00', '11:00', '12:00'],\r\n//     '2023-09-12': ['14:00', '15:00', '16:00'],\r\n//     '2023-09-13': ['10:00', '11:00', '12:00'],\r\n//     '2023-09-14': ['14:00', '15:00', '16:00'],\r\n//     '2023-09-15': ['10:00', '11:00', '12:00'],\r\n//     '2023-09-16': ['14:00', '15:00', '16:00'],\r\n//     '2023-09-17': ['10:00', '11:00', '12:00'],\r\n//     '2023-09-18': ['14:00', '15:00', '16:00'],\r\n//     '2023-09-19': ['10:00', '11:00', '12:00'],\r\n//     '2023-09-20': ['14:00', '15:00', '16:00'],\r\n//     '2023-11-28': ['10:00', '11:00', '12:00'],\r\n//     '2023-11-29': ['14:00', '15:00', '16:00'],\r\n//     '2023-11-30': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-01': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-02': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-03': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-04': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-05': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-06': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-07': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-08': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-09': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-10': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-11': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-12': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-13': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-14': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-15': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-16': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-17': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-18': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-19': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-20': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-21': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-22': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-23': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-24': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-25': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-26': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-27': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-28': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-29': ['14:00', '15:00', '16:00'],\r\n//     '2023-12-30': ['10:00', '11:00', '12:00'],\r\n//     '2023-12-31': ['14:00', '15:00', '16:00']\r\n// };\r\n\r\n\r\n// const fetchAPI = (date) => {\r\n//     return new Promise((resolve, reject) => {\r\n//         setTimeout(() => {\r\n//             if (availableTimesByDate[date]) {\r\n//                 resolve(availableTimesByDate[date])\r\n//             }\r\n//             else {\r\n//                 reject(new Error('No available times for the selected date.'));\r\n//             }\r\n//         }, 1000)\r\n//     })\r\n// }\r\n\r\n// const submitAPI = (formData) => {\r\n\r\n//     availableTimesByDate[formData.date] = availableTimesByDate[formData.date].filter(time => time !== formData.time);\r\n\r\n//     return new Promise((resolve, reject) => {\r\n//         setTimeout(() => {\r\n//             if (formData) {\r\n//                 resolve(true); // Simulate successful submission\r\n//             } else {\r\n//                 reject(new Error('Form submission failed.'));\r\n//             }\r\n//         }, 1000); // Simulate API delay\r\n//     });\r\n// };\r\n\r\n// export { fetchAPI, submitAPI }\r\n\r\n\r\nconst seededRandom = seed => {\r\n    const m = 2 ** 35 - 31;\r\n    const a = 185852;\r\n    let s = seed % m;\r\n\r\n    return () => (s = s * a % m) / m;\r\n};\r\n\r\nconst fetchAPI = date => {\r\n    let result = [];\r\n    let random = seededRandom(date.getDate());\r\n\r\n    for (let i = 17; i <= 23; i++) {\r\n        if (random() < 0.5) result.push(i + ':00');\r\n        if (random() < 0.5) result.push(i + ':30');\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nconst submitAPI = formData => true;\r\n\r\nexport {\r\n    fetchAPI,\r\n    submitAPI\r\n};"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,MAAMA,YAAY,GAAGC,IAAI,IAAI;EACzB,MAAMC,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE;EACtB,MAAMC,CAAC,GAAG,MAAM;EAChB,IAAIC,CAAC,GAAGH,IAAI,GAAGC,CAAC;EAEhB,OAAO,MAAM,CAACE,CAAC,GAAGA,CAAC,GAAGD,CAAC,GAAGD,CAAC,IAAIA,CAAC;AACpC,CAAC;AAED,MAAMG,QAAQ,GAAGC,IAAI,IAAI;EACrB,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIC,MAAM,GAAGR,YAAY,CAACM,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC;EAEzC,KAAK,IAAIC,CAAC,GAAG,EAAE,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC3B,IAAIF,MAAM,CAAC,CAAC,GAAG,GAAG,EAAED,MAAM,CAACI,IAAI,CAACD,CAAC,GAAG,KAAK,CAAC;IAC1C,IAAIF,MAAM,CAAC,CAAC,GAAG,GAAG,EAAED,MAAM,CAACI,IAAI,CAACD,CAAC,GAAG,KAAK,CAAC;EAC9C;EAEA,OAAOH,MAAM;AACjB,CAAC;AAED,MAAMK,SAAS,GAAGC,QAAQ,IAAI,IAAI;AAElC,SACIR,QAAQ,EACRO,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}